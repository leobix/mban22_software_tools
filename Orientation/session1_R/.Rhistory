# First, load in the rental data (check your working directory!)
setwd("~/git/mban_software_tools/session1_R/data")
# First, load in the rental data (check your working directory!)
setwd("~/git/mban22_software_tools/session1_R")
raw_listings <- read.csv('data/listings_clean.csv')
# How can I save a dataset that I was working on?
df_summary <- summary(df)
# 6. How can I import a dataset?
# Option 1: directly through a command
df = read.csv("data/listings_clean.csv")
summary(df)
# How can I save a dataset that I was working on?
df_summary <- summary(df)
describe(df)
write.csv(df_summary, "test_write.csv")
# How can I save a dataset that I was working on?
write.csv(df, "test_write.csv")
# How can I save a dataset that I was working on?
df_subset = df[1:10,:]
# How can I save a dataset that I was working on?
df_subset = df[1:10,]
# How can I save a dataset that I was working on?
df_subset <- df[1:10,]
write.csv(df_subset, "test_write.csv")
write.csv(df_subset, "test_write.csv", row.names = FALSE)
# 8. How can I clear my working environment?
# Option 1: directly through a commad
rm(list=ls())
# 6. How can I import a dataset?
# Option 1: directly through a command
df = read.csv("data/wine.csv")
# Look at the structure of the data:
str(wine)
# Look at a statistical summary of the data:
summary(wine)
# Look at the structure of the data:
str(df)
# Look at a statistical summary of the data:
summary(df)
# To access a variable in a data frame, you link it to the data frame with the dollar sign.
df$Year
df$WinterRain
# Compute the mean:
df(wine$WinterRain)
# We could also pull a single summary:
summary(df$WinterRain)
# In one year, there was only 376 mm of winter rain - which year?
which.min(wine$Price)
# In one year, there was only 376 mm of winter rain - which year?
which.min(df$Price)
df$Year[19]
# You can also do this in one step:
df$Year[which.min(df$Price)]
library(tidyverse)
setwd("~/git/mban22_software_tools/session1_R")
raw_listings <- read.csv('data/listings_clean.csv')
listings <- raw_listings %>%
filter(!is.na(bedrooms), !is.na(bathrooms)) %>%
mutate(price = as.numeric(gsub('[$,]', '', price)), # we are now replacing the price column, not creating a new one
cleaning_fee = as.numeric(gsub('[$,]', '', cleaning_fee)))
